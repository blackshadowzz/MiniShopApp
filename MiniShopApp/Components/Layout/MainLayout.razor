@using Microsoft.AspNetCore.Components.Authorization
@using MiniShopApp.Infrastructures.Services
@using MiniShopApp.Shared.AdditionalServices
@inherits LayoutComponentBase
@attribute [StreamRendering(false)]
@* @implements IDisposable *@
@* @inject LoadingTrackerService trackerService *@
<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_isDarkMode" Theme="_theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />



<MudLayout>
    <MudAppBar Elevation="1" Dense="false" Color="Color.Dark">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        Mini Order App
        <MudSpacer />
@*         <MudSwitch @bind-Value="_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Light/Dark" /> *@
        <MudToggleIconButton @bind-Toggled="_isDarkMode"
                             Class="ma-4"
                             Icon="@Icons.Material.Outlined.LightMode"
                             Color="@Color.Info"
                             ToggledIcon="@Icons.Material.Outlined.DarkMode"
                             ToggledColor="@Color.Success">
        </MudToggleIconButton>
        <AuthorizeView>
            <Authorized>
                <MudMenu>
                    <ActivatorContent>
                        <MudAvatar Icon="@Icons.Material.Filled.AccountCircle" />
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Href="/profile">Profile</MudMenuItem>
                        <MudMenuItem Href="/account/logout">Logout</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="/account/login" Color="Color.Primary" Variant="Variant.Filled">Login</MudButton>
                <MudButton Href="/account/register" Color="Color.Secondary" Variant="Variant.Outlined" Class="ml-2">Register</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Docked" Elevation="1" Variant="@DrawerVariant.Responsive">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6" Class="px-4">Mini App</MudText>
            
        </MudDrawerHeader>
            <MudNavMenu Class="mud-width-full">
                <MudNavLink Href="/" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
                <MudNavGroup Title="Orders" Icon="@Icons.Material.Filled.Lan">
                    <MudNavLink Href="/page/orders/create" Icon="@Icons.Material.Filled.Storefront" IconColor="Color.Success">New Order</MudNavLink>
                    <MudNavLink Href="/orders/views/today" Icon="@Icons.Material.Filled.Today" IconColor="Color.Primary">Order Today</MudNavLink>
                    <MudNavLink Href="/orders/views" Icon="@Icons.Material.Filled.History" IconColor="Color.Info">Order History</MudNavLink>
                </MudNavGroup>
                <MudNavGroup Title="Products" Icon="@Icons.Material.Filled.ListAlt">
                    <MudNavLink Href="/products" Icon="@Icons.Material.Filled.ListAlt" IconColor="Color.Success">Product</MudNavLink>
                    <MudNavLink Href="/categories" Icon="@Icons.Material.Filled.Category" IconColor="Color.Info">Category</MudNavLink>
                </MudNavGroup>
                <MudNavLink Href="/table" Icon="@Icons.Material.Filled.TableBar">Table</MudNavLink>
                
                <MudNavGroup Title="Customers" Icon="@Icons.Material.Filled.Groups2">
                <MudNavLink Href="/Customers/list" Icon="@Icons.Material.Filled.Groups3" IconColor="Color.Success">Customer</MudNavLink>
                    <MudNavLink Href="/Customers/Type/list" Icon="@Icons.Material.Filled.Category" IconColor="Color.Info">Customer Type</MudNavLink>
                </MudNavGroup>
                <MudNavGroup Title="User management" Icon="@Icons.Material.Filled.Group">
                    <MudNavLink Href="/" Icon="@Icons.Material.Filled.ManageAccounts" IconColor="Color.Success">User</MudNavLink>
                    <MudNavLink Href="/" Icon="@Icons.Material.Filled.Security" IconColor="Color.Info">Security</MudNavLink>
                </MudNavGroup>
                <MudNavGroup Title="Settings" Icon="@Icons.Material.Filled.Settings">
                    <MudNavLink Href="/settings/user/customer-log" Icon="@Icons.Material.Filled.LockPerson">Customer log</MudNavLink>
                    <MudNavLink Href="/settings/user/telegram-config" Icon="@Icons.Custom.Brands.Telegram">Telegram</MudNavLink>
                   
                </MudNavGroup>
                

            </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="mt-3">
            @Body
    </MudMainContent>
</MudLayout>
@code {
    bool _drawerOpen = true;
    bool IsExpanded = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private bool _isDarkMode=false;
    private MudThemeProvider? _mudThemeProvider;
    private MudBlazor.MudTheme _theme = new MudBlazor.MudTheme(); // Initialize the required theme
    private string? currentUrl;
    private bool isLoading;

    // protected override void OnInitialized()
    // {
    //     currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

    //     NavigationManager.LocationChanged += OnLocationChanged;

    //     trackerService.OnLoadingChanged += state =>
    //     {
    //         isLoading = state;

    //         InvokeAsync(StateHasChanged);
    //     };
    // }

    // private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    // {

    //     currentUrl = NavigationManager.ToBaseRelativePath(e.Location);

    //     StateHasChanged();
    // }

   
    // public void Dispose()
    // {
    //     NavigationManager.LocationChanged -= OnLocationChanged;

    //     trackerService.OnLoadingChanged -= state =>
    //     {
    //         isLoading = state;

    //         InvokeAsync(StateHasChanged);
    //     };
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _theme.PaletteDark = new MudBlazor.PaletteDark() // Use the correct derived class
            {
                Primary = "#673ab7", // Example primary color for dark mode
                Secondary = "#ff4081", // Example secondary color for dark mode
                Background = "#121212", // Example background color for dark mode
                TextPrimary = "#ffffff", // Example text color for dark mode
            };
             _isDarkMode = await _mudThemeProvider!.GetSystemDarkModeAsync();
            StateHasChanged();
        }
    }
}



