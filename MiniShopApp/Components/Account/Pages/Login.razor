@page "/account/login"

@using System.ComponentModel.DataAnnotations
@using Domain.IdentityModel
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@attribute [AllowAnonymous]
@layout ManageLayout

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> _userManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Log in</PageTitle>
<MudStack AlignItems="AlignItems.Center" Spacing="3" Justify="Justify.Center">
    
    <MudPaper Class="pa-4 mt-4 align-content-center" Elevation="2" Style="max-width: 400px; width: 100%;">
        <MudStack Spacing="3" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6" Align="Align.Center">Welcome to Mini App</MudText>
            <MudImage Src="/images/MiniLogo.jpg" Alt="Logo" Class="mx-auto" Style="max-width: 120px; max-height: 120px;" />
            <MudText Typo="Typo.subtitle1" Align="Align.Center">Please log in to continue.</MudText>
        </MudStack>
       
@*         <StatusMessage Message="@errorMessage" /> *@
        <form method="post" @onsubmit="HandleLogin">

            <MudTextField Label="Email " @bind-Value="Input.Email"
                          Required="true" RequiredError="Email is required"
                          Variant="Variant.Outlined"
                          Placeholder="Email or username"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Email" />

            <MudTextField Label="Password " @bind-Value="Input.Password"
                          InputType="InputType.Password"
                          Placeholder="Password"
                          Required="true" RequiredError="Password is required"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Lock" />

            <MudCheckBox T="bool" @bind-Checked="Input.RememberMe" Label="Remember me" />

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Class="mb-5" Color="Color.Primary" FullWidth="true">
                Log In
            </MudButton>
        </form>
        </MudPaper>
</MudStack>
<p>@errorMessage</p>
<form method="post" @onsubmit="LoginUser">
        <input @bind="Input.Email" class="form-control" placeholder="Email"/>
        <input @bind="Input.Password" class="form-control" placeholder="Password" />
    <button type="submit">Login</button>
</form>
@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    // [SupplyParameterFromForm]
    private UserRequest Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var context = HttpContextAccessor.HttpContext;
        if (context != null && HttpMethods.IsGet(context.Request.Method))
        {
            await context.SignOutAsync(IdentityConstants.ExternalScheme);
        }
        // if (HttpMethods.IsGet(HttpContext.Request.Method))
        // {
        //     // Clear the existing external cookie to ensure a clean login process
        //     await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        // }
    }
    private async Task HandleLogin()
    {
        var url = $"/Account/LogInHandle?email={Input.Email}&password={Input.Password}&rememberMe={Input.RememberMe}&returnUrl={ReturnUrl ?? "/"}";
        NavigationManager.NavigateTo(url, forceLoad: true); // Full page reload to Razor Page
        await Task.CompletedTask; // Ensure the method is async
    }
    public async Task LoginUser()
    {
        try
        {
            var loginUser = await _userManager.FindByEmailAsync(Input.Email);

            loginUser ??= await _userManager.FindByNameAsync(Input.Email);

            if (loginUser is null)
            {
                errorMessage = $"Error:{Input.Email} is not register yet.";
                return;
            }

            if (loginUser.IsActive == false)
            {

                errorMessage = $"Error:User is already deactive....";

                return;
            }

            var checkedPassword = await _userManager.CheckPasswordAsync(loginUser, Input.Password);

            if (!checkedPassword)
            {
                errorMessage = $"Error:Invalid Password...!";

                return;
            }
            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                RedirectManager.RedirectTo("/");
            }
            else
            {
                errorMessage = "Error: Invalid login attempt.";
            }
        }catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred during login.");
            errorMessage = ex.Message;
            return;
        }
    
    }
}