@page "/account/login"

@using System.ComponentModel.DataAnnotations
@using Domain.IdentityModel
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using MiniShopApp.Infrastructures.Services.Interfaces
@* @attribute [AllowAnonymous] *@
@layout ManageLayout
@inject UserManager<ApplicationUser> _userManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthProvider
@inject IUserService AuthService
<PageTitle>Log in</PageTitle>
<MudStack AlignItems="AlignItems.Center" Spacing="3" Justify="Justify.Center">
    
    <MudPaper Class="pa-4 mt-4 align-content-center" Elevation="2" Style="max-width: 400px; width: 100%;">
        <MudStack Spacing="3" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6" Align="Align.Center">Welcome to Mini App</MudText>
            <MudImage Src="/images/MiniLogo.jpg" Alt="Logo" Class="mx-auto" Style="max-width: 120px; max-height: 120px;" />
            <MudText Typo="Typo.subtitle1" Align="Align.Center">Please log in to continue.</MudText>
        </MudStack>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="my-2">
                @errorMessage
            </MudAlert>
        }
@*         <StatusMessage Message="@errorMessage" /> *@

            <MudTextField Label="Email " @bind-Value="Input.Email"
                          Required="true" RequiredError="Email is required"
                          Variant="Variant.Outlined"
                          Placeholder="Email or username"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Email" />

            <MudTextField Label="Password " @bind-Value="Input.Password"
                          InputType="InputType.Password"
                          Placeholder="Password"
                          Required="true" RequiredError="Password is required"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Lock" />

            <MudCheckBox T="bool" @bind-Checked="Input.RememberMe" Label="Remember me" />

        <MudButton ButtonType="ButtonType.Button" OnClick="LoginUser" Variant="Variant.Outlined" Class="mb-5" Color="Color.Primary" FullWidth="true">
                Log In
            </MudButton>
        </MudPaper>
  


</MudStack>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    // [SupplyParameterFromForm]
    private UserRequest Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    private string? messageFromCookie;
    protected override async Task OnInitializedAsync()
    {
        var context = HttpContextAccessor.HttpContext;

        if (context is not null)
        {
            messageFromCookie = context.Request.Cookies[IdentityRedirectManager.StatusCookieName];

            if (messageFromCookie is not null)
            {
                context.Response.Cookies.Delete(IdentityRedirectManager.StatusCookieName);
            }
        }
        // var context = HttpContextAccessor.HttpContext;
        // if (context != null && HttpMethods.IsGet(context.Request.Method))
        // {
        //     await context.SignOutAsync(IdentityConstants.ExternalScheme);
        // }
        // if (HttpMethods.IsGet(HttpContext.Request.Method))
        // {
        //     // Clear the existing external cookie to ensure a clean login process
        //     await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        // }
        await base.OnInitializedAsync();
    }
    public async Task LoginUser()
    {
        try
        {
            var (success, error) = await AuthService.LoginAsync(Input);
            if (!success)
            {
                errorMessage = $"Error: {error}";
                return;
            }

            NavigationManager.NavigateTo("/");
        }catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred during login.");
            errorMessage = ex.Message;
            return;
        }
    
    }
}