@page "/products"
@using MiniShopApp.Components.Layout
@using MiniShopApp.Models.Items
@using System.Globalization
@layout MainLayout

@rendermode InteractiveServer
<PageTitle>Products</PageTitle>

<MudTable ServerData="ServerReload" @ref="table" Dense="true" Hover="true">
    <ToolBarContent>
        <MudButton Href="/products/create" Variant="Variant.Filled" Color="Color.Primary">Create Product</MudButton>
        <MudSpacer />
        <MudTextField Immediate="true" T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
        Class=""></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh><MudTableSortLabel SortLabel="ProductCode" T="Product">Product Code</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="ProductName" T="Product">Product Name</MudTableSortLabel></MudTh>
        <MudTh>Category</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Subprice</MudTh>
        <MudTh>Image Url</MudTh>
        <MudTh>Image Prev</MudTh>
        <MudTh>Action</MudTh>
        

    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Id</MudTd>
        <MudTd DataLabel="ProductCode">@context.ProductCode</MudTd>
        <MudTd DataLabel="ProductName">@context.ProductName</MudTd>
        <MudTd>@context.CategoryId</MudTd>
        <MudTd>@context.Price?.ToString("C",new CultureInfo("en-Us"))</MudTd>
        <MudTd>@context.SubPrice?.ToString("C", new CultureInfo("en-Us"))</MudTd>
        <MudTd>@context.ImageUrl</MudTd>
        <MudTd>
            <MudImage Src="@context.ImageUrl" Height="100"/>
        </MudTd>
        <MudTd>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem Href="@($"/products/create/{context.Id}")">Edit</MudMenuItem>
                <MudMenuItem>Detail</MudMenuItem>
                <MudMenuItem>Delete</MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No Data</MudText>
    </NoRecordsContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>
@code{
    private IEnumerable<Product> pageData;
    private MudTable<Product> table;
    private int totalItems;
    private string searchString = null;
    private async Task<TableData<Product>> ServerReload(TableState state,CancellationToken token)
    {
        IEnumerable<Product> _data = await productService.GetAllAsync();
        await Task.Delay(1000); // Simulate a delay for loading data
        _data = _data.Where(x =>
        {
            if(string.IsNullOrEmpty(searchString))
                return true;
            if(x.ProductCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (x.ProductName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;


        }).ToArray();
        totalItems = _data.Count();
        switch (state.SortLabel)
        {
            case "ProductCode":
                _data = state.SortDirection == SortDirection.Ascending ? 
                    _data.OrderBy(x => x.ProductCode) : 
                    _data.OrderByDescending(x => x.ProductCode);
                break;
            case "ProductName":
                _data = state.SortDirection == SortDirection.Ascending ? 
                    _data.OrderBy(x => x.ProductName) : 
                _data.OrderByDescending(x => x.ProductName);
                break;
        }
        pageData = _data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Product>() 
        {
            TotalItems = totalItems,
            Items = pageData
        };


    }
    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}


