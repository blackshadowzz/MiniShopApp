@page "/order/ordering/{userId:long?}"
@layout MainLayout2
@rendermode InteractiveServer

<PageTitle>Products</PageTitle>
@* <p>@customerId</p> *@
@if (IsLoading == true)
    {
         <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    <div class="my-2">


        <div class="input-group mb-3">
            <input type="text"
                   class="form-control"
                   @bind-value="_filter"
                   @oninput="@((e) => OnSearch(e))"
                   placeholder="Search here..."
                   aria-describedby="button-addon2" />
            <button class="btn btn-outline-secondary" @onclick="OnGetSearchRefresh" type="button" id="button-addon2"><i class="bi bi-search"></i></button>
        </div>
    </div>
    
    <div class="row row-cols-3 row-cols-md-6 g-2 mb-5 pb-2">
        @foreach (var list in _products)
        {
            <div class="col">

                <div class="card h-100">
                    @if (list?.QTYIncrease > 0)
                    {
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            @list?.QTYIncrease
                            <span class="visually-hidden">unread messages</span>
                        </span>
                    }


                    <img src="@list?.ImageUrl" class="card-img-top" alt="..." @onclick="@(() => GetItemDetails(list!.Id))">
                    <div class="card-body" @onclick="@(() => GetItemDetails(list!.Id))">
                        <h6 class="card-title">@list?.ProductName</h6>
                        <h5 class="card-text text-danger">@String.Format("${0:N2}", list?.Price)</h5>
                    </div>
                    <div class="d-flex justify-content-between mx-2 my-2">

                    <MudIconButton Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="@(() => DescreasProduct(list!.Id))" Color="Color.Info" Size="Size.Medium" />
                    <MudIconButton Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="@(() => AddProduct(list!.Id))" Color="Color.Primary" Size="Size.Medium" />
                       
                    </div>
                </div>

            </div>
        }
    </div>

  




<div class="pt-5">
    <div class="fixed-bottom">
        <div class="d-flex justify-content-between gap-2">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Info" Color="Color.Info" OnClick="ShowDetails" Style="width:45%">View Order @orderDetails.Count() </MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCard" OnClick="@PlaceOrderAsync" Color="Color.Primary" Style="width:55%">Place Order</MudButton>
        </div>
    </div>
</div>


<!-- Modal -->
@code {
    async Task GetItemDetails(int id)
    {
        var item = _products.FirstOrDefault(x => x.Id == id);
        bool? result = await DialogService.ShowMessageBox(
            $"Details: {item?.ProductName}",
            (MarkupString)
            $"Name: {item?.ProductName} <br /> Price: {item?.Price?.ToString("c2")} <br /> Description: {item?.Description} <br /> ");
        StateHasChanged();
    }
    async Task ShowDetails()
    {
        await DialogService.ShowAsync<DialogOrderDetails>("Order list", new DialogParameters
        {
            { "orderDetails", orderDetails }
        });
    }
}