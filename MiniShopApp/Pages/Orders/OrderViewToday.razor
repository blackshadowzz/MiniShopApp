@using DocumentFormat.OpenXml.Drawing
@using MiniShopApp.Models.Orders
@using MiniShopApp.Shared.AdditionalServices
@using MiniShopApp.Shared.DropdownActions
@page "/orders/views/today"
@layout MainLayout
@inject PdfService pdfService
<PageTitle>Order Today</PageTitle>

<MudTabs Outlined="true" >
    <MudTabPanel Text="Today" Icon="@Icons.Material.Filled.CalendarToday" OnClick="GetOrderToday">
        <MudTabs Outlined="false">
            <MudTabPanel Text="Card" Icon="@Icons.Material.Filled.GridView">
                <MudStack>
                    <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Variant=Variant.Text Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="my-2"></MudTextField>
                </MudStack>
                <MudGrid>
                    @if (orders is not null && orders.Any())
                    {
                        @foreach (var order in orders)
                        {
                            <MudItem>
                                <MudCard Class="mb-2" Elevation="3" Style="width:250px;max-width:350px">
                                    <MudCardHeader>
                                        <CardHeaderContent >
                                            <MudText Typo="Typo.subtitle1">#@order.OrderCode </MudText>
                                         
                                        </CardHeaderContent>
                                        
                                        <CardHeaderActions>
                                            <DropdownOrder ClickPrint="@(() => GenerateReceiptAsync(new[] { order }))" 
                                                ClickModifyPaid="@(()=>ConfirmPayment(order.Id))"
                                                           ClickModifyCancel="@(()=>ConfirmPaymentCancel(order.Id))" />
                                            
                                        </CardHeaderActions>
                                    </MudCardHeader>

                                    <MudCardContent>
                                        <MudText>Customer: <b> @(order.FirstName??order.CustomerType)</b></MudText>
                                        <MudText>Table: <b>@order.TableNumber</b></MudText>
                                        <MudText>Items: <b>@order.ItemCount</b></MudText>
                                        <MudText>Total: <b>@order.TotalPrice?.ToString("c2")</b></MudText>
                                        <MudDivider Class="my-2" />
                                        <MudList T="MiniShopApp.Models.Orders.ViewTbOrderDetails" Dense="true">
                                            @if (order.TbOrderDetails != null)
                                            {
                                                @foreach (var detail in order.TbOrderDetails)
                                                {
                                                    <MudListItem T="MiniShopApp.Models.Orders.ViewTbOrderDetails" Value="@detail">
                                                        <MudText>@detail.ItemName x @detail.Quantity = @detail.TotalPrice?.ToString("c2")</MudText>
                                                    </MudListItem>
                                                }
                                            }
                                        </MudList>
                                    </MudCardContent>
                                    <MudCardActions Class="justify-content-between">
                                        <MudText Typo="Typo.caption">Date: @order.CreatedDT?.ToString("dd/MMM/yy hh:mm tt")</MudText>
                                        @if (order.OrderStatus == Statuses.Paid.ToString())
                                        {
                                        <MudText Typo="Typo.subtitle2" Color="Color.Success">@order.OrderStatus</MudText>
                                            
                                        }else if(order.OrderStatus == Statuses.Canceled.ToString())
                                        {
                                            <MudText Typo="Typo.subtitle2" Color="Color.Info">@order.OrderStatus</MudText>

                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">@order.OrderStatus</MudText>

                                        }

                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    }
                    else
                    {
                        <MudItem xs="12">
                            <MudText>No orders found for today.</MudText>
                        </MudItem>
                    }
                </MudGrid>
            </MudTabPanel>
            <MudTabPanel Text="Grid" Icon="@Icons.Material.Filled.ListAlt" >
                <MudStack>
                    <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Variant=Variant.Text Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="my-2"></MudTextField>
                </MudStack>
                <DropdownActionOrder ExpandedAction="_expandedEdit"
                                     ItemCount="@selectedOrders.Count"
                                     DisabledPaid=false
                                     DisabledCancel=false
                                     ClickModifyPaid="@(() => ConfirmPaidBulk(selectedOrders))"
                                     ClickModifyCancel="@(() => ConfirmCancelBulk(selectedOrders))"
                                     ClickPrint="@(() => GenerateReceiptAsync(selectedOrders))" />

                <MudTable ServerData="ServerReload" 
                    FixedHeader="@fixed_header" 
                    FixedFooter="@fixed_footer"
                          Height="@(fixed_header || fixed_footer ? "500px" : "")"
                          MultiSelection="true"
                         
                    T="ViewTbOrders" 
                    Dense="true" Hover="true" @ref="table" Loading="isLoading" OnRowClick="OnExpandCollapseClick"
                    SelectOnRowClick=false
                    SelectedItemsChanged="@(items => MultiSelect(items))">
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel SortLabel="Id" T="ViewTbOrders">
                                Date
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortLabel="OrderCode" T="ViewTbOrders">
                                Code #
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortLabel="CustomerType" T="ViewTbOrders">
                                Customer
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>Table</MudTh>
                        <MudTh>Item</MudTh>
                        <MudTh>Price</MudTh>
                        <MudTh>Discount</MudTh>
                        <MudTh>
                            <MudTableSortLabel SortLabel="Id" T="ViewTbOrders">
                                Total
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortLabel="OrderStatus" T="ViewTbOrders">
                                Status
                            </MudTableSortLabel>
                        </MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd @key="context.Id" DataLabel="Order ID"><MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" /> @context.CreatedDT?.ToString("dd/MMM/yy")</MudTd>
                        <MudTd DataLabel="OrderCode">@context.OrderCode</MudTd>
                        <MudTd DataLabel="CustomerType">@(context.FirstName ?? context.CustomerType)</MudTd>
                        <MudTd DataLabel="TableNumber">@context.TableNumber</MudTd>
                        <MudTd DataLabel="ItemCount">@context.ItemCount</MudTd>
                        <MudTd DataLabel="SubPrice">@context.SubPrice?.ToString("c2")</MudTd>
                        <MudTd DataLabel="DiscountPrice">@context.DiscountPrice?.ToString("P0")</MudTd>
                        <MudTd DataLabel="TotalPrice">@context.TotalPrice?.ToString("c2")</MudTd>
                        <MudTd DataLabel="OrderStatus">
                            @if (context.OrderStatus == Statuses.Paid.ToString())
                            {
                                <MudText Typo="Typo.subtitle2" Color="Color.Success">@context.OrderStatus</MudText>

                            }
                            else if (context.OrderStatus == Statuses.Canceled.ToString())
                            {
                                <MudText Typo="Typo.subtitle2" Color="Color.Info">@context.OrderStatus</MudText>

                            }
                            else
                            {
                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">@context.OrderStatus</MudText>

                            }

                            </MudTd>
          
                    </RowTemplate>
                           
                      
                    <ChildRowContent>

                        <MudTd ColSpan="10" Class="bg-body-tertiary" hidden="@(_expandedOrderId != context.Id)" DataLabel="Order details">
                            <MudCollapse Expanded="_expandedOrderId == context.Id" Tag="@context.Id">
                                <MudTable Items="@context.TbOrderDetails" Dense=true Context="c">
                                    <HeaderContent>
                                        <MudTh>Id</MudTh>
                                        <MudTh>Item</MudTh>
                                        <MudTh>Quantity</MudTh>
                                        <MudTh>Price</MudTh>
                                        <MudTh>Total Price</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd> @c.Id</MudTd>
                                        <MudTd>@c.ItemName</MudTd>
                                        <MudTd>@c.Quantity</MudTd>
                                        <MudTd>@c.Price?.ToString("c2")</MudTd>
                                        <MudTd>@c.TotalPrice?.ToString("c2")</MudTd>
                                    </RowTemplate>
                                </MudTable>
                                
                            </MudCollapse>
                        </MudTd>

                    </ChildRowContent>
                    
                    <NoRecordsContent>
                        <MudText>No matching records found</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                    <FooterContent>
                        <MudTd colspan="6"></MudTd>
                        <MudTd>Total</MudTd>
                        <MudTd><b>@orders.Sum(x => x.TotalPrice)?.ToString("c2")</b></MudTd>
                    </FooterContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
                <MudStack Row=true StretchItems="StretchItems.None">
                    <MudCheckBox @bind-Value="fixed_header" Color="Color.Primary">Fixed Header</MudCheckBox>
                    <MudCheckBox @bind-Value="fixed_footer" Color="Color.Primary">Fixed Footer</MudCheckBox>
                </MudStack>
            </MudTabPanel>
           
        </MudTabs>
       
    </MudTabPanel>
    <MudTabPanel Text="Yesterday" Icon="@Icons.Material.Filled.CalendarViewWeek" OnClick="GetOrderYesterday">
        <MudStack>
            <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Variant=Variant.Text Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="my-2"></MudTextField>
        </MudStack>
        <DropdownActionOrder ExpandedAction="_expandedEdit"
                             ItemCount="@selectedYesterdayOrders.Count"
                             ClickPrint="@(() => GenerateReceiptAsync(selectedYesterdayOrders))" />
        <MudTable ServerData="ServerReload"
                  FixedHeader="@fixed_header"
                  FixedFooter="@fixed_footer"
                  Height="@(fixed_header || fixed_footer ? "500px" : "")"
                  MultiSelection="true"
                  T="ViewTbOrders"
                  Dense="true" Hover="true" @ref="table" Loading="isLoading" OnRowClick="OnExpandCollapseClick"
                  SelectOnRowClick=false
                  SelectedItemsChanged="@(items => MultiSelectYesterday(items))">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortLabel="Id" T="ViewTbOrders">
                        Date
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortLabel="Id" T="ViewTbOrders">
                        Customer Id
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortLabel="Id" T="ViewTbOrders">
                        Customer
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>Table</MudTh>
                <MudTh>Item</MudTh>
                <MudTh>Price</MudTh>
                <MudTh>Discount</MudTh>
                <MudTh>
                    <MudTableSortLabel SortLabel="Id" T="ViewTbOrders">
                        Total
                    </MudTableSortLabel>
                </MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd @key="context.Id" DataLabel="Order ID"><MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" /> @context.CreatedDT?.ToString("dd/MMM/yy")</MudTd>
                <MudTd DataLabel="CustomerId">@context.CustomerId</MudTd>
                <MudTd DataLabel="FirstName">@(context.FirstName ?? context.CustomerType)</MudTd>
                <MudTd DataLabel="TableNumber">@context.TableNumber</MudTd>
                <MudTd DataLabel="ItemCount">@context.ItemCount</MudTd>
                <MudTd DataLabel="SubPrice">@context.SubPrice?.ToString("c2")</MudTd>
                <MudTd DataLabel="DiscountPrice">@context.DiscountPrice?.ToString("P0")</MudTd>
                <MudTd DataLabel="TotalPrice">@context.TotalPrice?.ToString("c2")</MudTd>

            </RowTemplate>


            <ChildRowContent>

                <MudTd ColSpan="9" Class="bg-body-tertiary" hidden="@(_expandedOrderId != context.Id)" DataLabel="Order details">
                    <MudCollapse Expanded="_expandedOrderId == context.Id" Tag="@context.Id">
                        <MudTable Items="@context.TbOrderDetails" Dense=true Context="c">
                            <HeaderContent>
                                <MudTh>Id</MudTh>
                                <MudTh>Item</MudTh>
                                <MudTh>Quantity</MudTh>
                                <MudTh>Price</MudTh>
                                <MudTh>Total Price</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd> @c.Id</MudTd>
                                <MudTd>@c.ItemName</MudTd>
                                <MudTd>@c.Quantity</MudTd>
                                <MudTd>@c.Price?.ToString("c2")</MudTd>
                                <MudTd>@c.TotalPrice?.ToString("c2")</MudTd>
                            </RowTemplate>
                        </MudTable>

                    </MudCollapse>
                </MudTd>

            </ChildRowContent>

            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <FooterContent>
                <MudTd colspan="6"></MudTd>
                <MudTd>Total</MudTd>
                <MudTd><b>@orders.Sum(x => x.TotalPrice)?.ToString("c2")</b></MudTd>
            </FooterContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
        <MudStack Row=true StretchItems="StretchItems.None">
            <MudCheckBox @bind-Value="fixed_header" Color="Color.Primary">Fixed Header</MudCheckBox>
            <MudCheckBox @bind-Value="fixed_footer" Color="Color.Primary">Fixed Footer</MudCheckBox>
        </MudStack>
    </MudTabPanel>
    <MudTabPanel Text="More" Icon="@Icons.Material.Filled.ViewList" >
        <OrderViewPage/>
    </MudTabPanel>

</MudTabs>


@code{
    bool fixed_header = true;
    bool fixed_footer = true; 
    bool _expandedEdit = false;
    void clearData()
    {
        _expandedEdit = false;
        table.ReloadServerData();
        selectedOrders.Clear();
    }
    long? _expandedOrderId = null;
    bool isLoading = false;
    private void OnExpandCollapseClick(TableRowClickEventArgs<ViewTbOrders> row)
    {
        if (_expandedOrderId == row.Item.Id)
            _expandedOrderId = null; // Collapse if already expanded
        else
            _expandedOrderId = row.Item.Id; // Expand this row
    }
    private int totalItems;
    private string? searchString = null;
    private IEnumerable<ViewTbOrders> pagedData;
    private MudTable<ViewTbOrders> table;
    private List<ViewTbOrders> selectedOrders = new();

    void MultiSelect(IEnumerable<ViewTbOrders> items)
    {
        selectedOrders = items.ToList();
        if(selectedOrders.Any())
            _expandedEdit = true;
        else
            _expandedEdit = false;

        StateHasChanged();
    }
    private List<ViewTbOrders> selectedYesterdayOrders = new();

    void MultiSelectYesterday(IEnumerable<ViewTbOrders> items)
    {
        selectedYesterdayOrders = items.ToList();
        if (selectedYesterdayOrders.Any())
            _expandedEdit = true;
        else
            _expandedEdit = false;

        StateHasChanged();
    }
    private async Task<TableData<ViewTbOrders>> ServerReload(TableState state, CancellationToken token)
    {
        IEnumerable<ViewTbOrders> data = orders;
        await Task.Delay(300, token);
        data = data.Where(element =>
        {
            bool matches = true;
            if (!string.IsNullOrWhiteSpace(searchString))
            {
                matches = element.CustomerId.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
                    || (element.TableNumber != null && element.TableNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    || (element.LastName != null && element.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    || (element.Id.ToString() != null && element.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    || (element.FirstName != null && element.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase));
            }
            // if (matches && startDate.HasValue)
            // {
            //     matches = element.CreatedDT.HasValue && element.CreatedDT.Value.Date >= startDate.Value.Date;
            // }
            // if (matches && endDate.HasValue)
            // {
            //     matches = element.CreatedDT.HasValue && element.CreatedDT.Value.Date <= endDate.Value.Date;
            // }
            // if (matches && selectedMonth.HasValue)
            // {
            //     matches = element.CreatedDT.HasValue && element.CreatedDT.Value.Month == selectedMonth.Value;
            // }
            // if (matches && selectedYear.HasValue)
            // {
            //     matches = element.CreatedDT.HasValue && element.CreatedDT.Value.Year == selectedYear.Value;
            // }
            return matches;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "Id":
                data = data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "CustomerId":
                data = data.OrderByDirection(state.SortDirection, o => o.CustomerId);
                break;
            case "TableNumber":
                data = data.OrderByDirection(state.SortDirection, o => o.TableNumber);
                break;
            case "FirstName":
                data = data.OrderByDirection(state.SortDirection, o => o.FirstName);
                break;
            case "TotalPrice":
                data = data.OrderByDirection(state.SortDirection, o => o.TotalPrice);
                break;

        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<ViewTbOrders>() { TotalItems = totalItems, Items = pagedData.OrderByDescending(x => x.Id) };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}
<style>
.sticky-footer-total {
    position: sticky;
    bottom: 0;
    left: 0;
    width: 100%;
    z-index: 100;
    background: white;
    padding: 0.5rem 0;
}
.sticky-tabs-top {
    position: sticky;
    top: 0;
    z-index: 110;
    background: white;
}
</style>


